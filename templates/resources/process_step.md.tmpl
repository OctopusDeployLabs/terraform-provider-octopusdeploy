---
page_title: "{{.Name}} {{.Type}} - {{.ProviderName}}"
subcategory: "Runbook & Deployment Processes"
description: |-
{{ .Description | plainmarkdown | trimspace | prefixlines "  " }}
---

# {{.Name}} ({{.Type}})

{{ .Description | trimspace }}

### Remarks
A Step is the building block of a Deployment or Runbook Process. 

When there are multiple Steps in a Process, we strongly recommend adding a `octopusdeploy_process_step_order` resource to pin the step order. If you later need to change the order of steps in your process, or insert a new step within an existing process, you'll need the Step Order defined first. Without an explicit Step Order, Steps will be added to the process in the order they're applied by Terraform - this is usually the order they appear in your HCL, but is not guaranteed to be deterministic. 

Unlike the old `octopusdeploy_deployment_process` resource, we do not currently support "strongly-typed" deployment actions. We found that the combination of strongly-typed properties along with the key-value-pair `properties` collection was a source of a lot of state drift, which the new approach is designed to prevent. We know that this makes it more laborious to author a functional Process in a code-first manner, and plan to address the problem in the future. The new shape of the `octopusdeploy_process` and associated resources will actually better support strongly-typed resources in the future without having the same susceptibility to ordering problems, but we want to be able to generate these so that they stay in sync as Octopus changes over time, rather than hand-crafting them as we previously were. For now, we have written a guide to show you how to discover the correct property combinations for each step.

This resource also contains a concept that doesn't exist in the Octopus Deploy domain model: `properties` vs `execution_properties`:

* `properties` are the inputs to the step itself
* `execution_properties` are the controls for _how_ the step runs, particularly relevant in parent/child step situations

For more information on how to discover step properties read the *How to Find Step Properties* under the guides section of the documentation.

## Example Usage

{{ tffile (printf "%s%s%s" "examples/resources/" .Name "/resource.tf") }}

{{ .SchemaMarkdown | trimspace }}

{{ if .HasImport -}}
## Import

Import is supported using the following syntax:

{{ codefile "shell" (printf "%s%s%s" "examples/resources/" .Name "/import.sh") }}
{{- end }}
